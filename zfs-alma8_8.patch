--- include/linux/blkdev_compat.h	2020-12-11 20:31:27.438539057 +0000
+++ include/linux/blkdev_compat.h	2024-01-12 22:10:48.647405672 +0000
@@ -144,14 +144,6 @@ blk_queue_set_read_ahead(struct request_
 #endif
 }
 
-#ifndef HAVE_GET_DISK_AND_MODULE
-static inline struct kobject *
-get_disk_and_module(struct gendisk *disk)
-{
-	return (get_disk(disk));
-}
-#endif
-
 #ifndef HAVE_GET_DISK_RO
 static inline int
 get_disk_ro(struct gendisk *disk)
--- include/linux/simd_x86.h	2020-12-11 20:31:27.438539057 +0000
+++ include/linux/simd_x86.h	2024-01-12 22:10:48.647405672 +0000
@@ -97,6 +97,7 @@
 #if defined(HAVE_KERNEL_FPU_API_HEADER)
 #include <asm/fpu/api.h>
 #include <asm/fpu/internal.h>
+#include <asm/fpu/xcr.h>
 #else
 #include <asm/i387.h>
 #include <asm/xcr.h>
--- module/zfs/zvol.c	2020-12-11 20:33:40.505568775 +0000
+++ module/zfs/zvol.c	2024-01-12 22:10:48.697405895 +0000
@@ -175,31 +175,6 @@ zvol_name_hash(const char *name)
 }
 
 /*
- * Find a zvol_state_t given the full major+minor dev_t. If found,
- * return with zv_state_lock taken, otherwise, return (NULL) without
- * taking zv_state_lock.
- */
-static zvol_state_t *
-zvol_find_by_dev(dev_t dev)
-{
-	zvol_state_t *zv;
-
-	rw_enter(&zvol_state_lock, RW_READER);
-	for (zv = list_head(&zvol_state_list); zv != NULL;
-	    zv = list_next(&zvol_state_list, zv)) {
-		mutex_enter(&zv->zv_state_lock);
-		if (zv->zv_dev == dev) {
-			rw_exit(&zvol_state_lock);
-			return (zv);
-		}
-		mutex_exit(&zv->zv_state_lock);
-	}
-	rw_exit(&zvol_state_lock);
-
-	return (NULL);
-}
-
-/*
  * Find a zvol_state_t given the name and hash generated by zvol_name_hash.
  * If found, return with zv_suspend_lock and zv_state_lock taken, otherwise,
  * return (NULL) without the taking locks. The zv_suspend_lock is always taken
@@ -467,7 +442,7 @@ out:
 		mutex_exit(&zv->zv_state_lock);
 
 	if (disk != NULL)
-		revalidate_disk(disk);
+	        revalidate_disk_size(disk, disk->fops->revalidate_disk(disk) == 0);
 
 	return (SET_ERROR(error));
 }
@@ -1657,21 +1632,6 @@ zvol_getgeo(struct block_device *bdev, s
 	return (0);
 }
 
-static struct kobject *
-zvol_probe(dev_t dev, int *part, void *arg)
-{
-	zvol_state_t *zv;
-	struct kobject *kobj;
-
-	zv = zvol_find_by_dev(dev);
-	kobj = zv ? get_disk_and_module(zv->zv_disk) : NULL;
-	ASSERT(zv == NULL || MUTEX_HELD(&zv->zv_state_lock));
-	if (zv)
-		mutex_exit(&zv->zv_state_lock);
-
-	return (kobj);
-}
-
 static struct block_device_operations zvol_ops = {
 	.open			= zvol_open,
 	.release		= zvol_release,
@@ -2729,9 +2689,6 @@ zvol_init(void)
 		goto out_free;
 	}
 
-	blk_register_region(MKDEV(zvol_major, 0), 1UL << MINORBITS,
-	    THIS_MODULE, zvol_probe, NULL, NULL);
-
 	return (0);
 
 out_free:
@@ -2750,8 +2707,6 @@ void
 zvol_fini(void)
 {
 	zvol_remove_minors_impl(NULL);
-
-	blk_unregister_region(MKDEV(zvol_major, 0), 1UL << MINORBITS);
 	unregister_blkdev(zvol_major, ZVOL_DRIVER);
 	kmem_free(zvol_htable, ZVOL_HT_SIZE * sizeof (struct hlist_head));
 
